Notes for the use of Configurable Components:

Configurable Component Specification

The Component DTD has been extended to include a new type named ‘configurable’. 
This new type will extend the current basic component type and has the following
additional elements within the component specification:

	<configurator> : location of the jsp used to gather the component instances
		property values when first placed on the page.
	<properties> : a list of the configurable properties of this component instance.

eg:
	<configurable>
		<name>Validator Test</name>
		<description>Displays a range of inputs</description>
		<location>/pageStudio/components/validator-test.jsp</location>
		<configurator>/pageStudio/components/validator-test-cfg.jsp</configurator>
		<properties>
			<property ...
			<property ...
		</properties>
	</configurable>
	
Each property declaration will define a unique property for all component instances 
of this component type and each of the properties characteristics are specificed in
the attributes present in the <property> element :
eg.
	<property name='list1' type='list' range='/l1|/l2|/l3|/l4' defaultVale='' />

The values of the attributes define the following characteristics of each property.

	name [ MANDATORY ] : A unique name for the property (unique within this component 
		specifications set of property declarations).
  type [ MANDATORY ]: The type of the property value, at present these include - 
  	string : any string value
  	numeric : only numeric characters (including '.-+' characters)
  	list : one or more string values (which might be constrained by the range attribute)
  	singlevaluelist: a single value (which might be constrained by the range attribute)
	range: A range of possible values for the property, each possible value is seperated
		by the '|' character.
	defaultValue: The value assigned to the property if no configuration value is 
		supplied when a component instance is first configured on the page. 
	size: this attribute provides a limit value to the property.
		If the property is numeric (and an integer) the size attribute
		value provids an upper limit to the actual property value e.g.
		If the attribute size='300' is present in a numeric property
		then when validating valeus for this property any value that is greater
		than 300 will fail validation. 
		If the attribute size='25' is present in a list, string or
		single value list property then the validator will ensure that any
		supplied property value must not exceed 25 characters in length.
		The default value is 0 which indicates that no valiation will be used against 
		the size attribute.
	mandatory: this attribute replaces the use of the value="mandatory" attribute
		if it is present ina property specification and has the value 'true' then
		the validator will not allow a property value null or empty to pass
		validation when the component is configured.

A Component specification may have one or more property specifications which are 
collected together within a <properties> element:

	<properties>
		<property name='string1' type='string' defaultValue='a string property' />
		<property name='numeric1' type='numeric' defaultValue='100' />
		<property name='singlevaluelist1' type='singlevaluelist' range='/images/im1|/images/im2' />
		<property name='list1' type='list' range='/l1|/l2|/l3|/l4' />
	</properties>

When using the PageStudio toolbar and inserting a configurable component the
ComponentFactory will return a configuration form that allows for the property
values capture of the component instance. 
This configuration form is located at the url indicated by the element <configurator>.
In order to successful process, capture and record the property values that
are set in the configuration form a tailored header and footer sections containing the
<form> element and submit button actions must be imposed.

By default the tailored header and footer sections are autogenerated within the 
ComponentFactory but it is possible to make use of custom versions of these sections.
The configuration parameter <param-name>use-custom-configuration-form-jsps</param-name>
can be set to 'true' to allow for custom tailoring of these sections. In this case
the header and footer jsps located below will be used and can be tailored as required. 

 [ components-dir ]/custom-property-capture-header.jsp
 [ components-dir ]/custom-property-capture-footer.jsp
 
When the configure button is pressed after setting the properties using the <configurator>
jsp the property values will be processed and validated. The validation will check that
the supplied values match the property specification in the configurable component psc file.
If any properties do not pass the validation check these will not be recorded and the 
capture form will be re-presented and an alert listing which property names failed
validation will be shown.

This default behavior can again be tailored by setting the following parameter to 'true'
<param-name>use-custom-invalid-properties-display</param-name> and amending the custom
error reporting jsp located at:

 [ components-dir ]/custom-invalid-properties-display.jsp

After succesful validation of the property capture form the component body will be displayed.

All configrable component bodies must contain a single <ps:component> tag that surrounds
the component body content and provides access to the configured property values. An
example template is provided for use by configurable component authors and is located at:

 [ components-dir ]/component-template.jsp

In order for the component body to retrieve the configured values a scripting variable is used
within the component body. This scripting variable is called the 'propertyPublisher' and has
the following operations:

	propertyPublisher.getProperty([property name])
	propertyPublisher.getPropertyList([propertyName])
	propertyPublisher.getInstId()

The getProperty returns a string representation of the property value and the getPropertyList
returns a string array representing the collection of values of the property list.

eg.

<ps:component>
..

<h4>Suppplied values:</h4>
	<div style="align:left;"><span>String : </span></div>
	<div><%= propertyPublisher.getProperty("string1") %></div><br/>
	<div style="align:left;"><span>Numeric : </span></div>
	<div><%= propertyPublisher.getProperty("numeric1") %></div><br/>
	<div style="align:left;"><span>List : </span></div>
	<div><%= propertyPublisher.getPropertyList("list1") %></div><br/>
	<div style="align:left;"><span>SingleValueList : </span></div>
	<div><%= propertyPublisher.getProperty("singlevaluelist1") %></div><br/>
</ps:component>

Some components may require the equivalent of an OnLoad event to set details within the
component body at render time. This can be achieved through the use of a javascript function
which is evaluated when the component body is placed within the page and any configuration
javascript operations should be placed or called from this callback function.

The example below presents an alert showing the component instance id of this particular
component when it is rendered on the page. This configuration will be called when the
component is first placed within the page and also when the page is rendered so care must
be taken when manipulating any page content.

<ps:component>
..
<script language="javascript" type="text/javascript">
componentLoadHandler = function (){
alert("Hey its me .. running in the user details [ " + <%= propertyPublisher.getInstId() %> + " ] callback");
};

componentLoadHandler();
</script>
..
</ps:component>
